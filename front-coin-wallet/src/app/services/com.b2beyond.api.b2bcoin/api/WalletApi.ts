/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class WalletApi {
    protected basePath = 'https://api.b2bcoin.xyz/b2bcoin/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     */
    public createAddress(coinType: string, extraHttpRequestParams?: any): Observable<models.UserAddress> {
        return this.createAddressWithHttpInfo(coinType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a payment
     * Create a payment and return the hash of it.
     * @param coinType 
     * @param body 
     */
    public createPayment(coinType: string, body?: models.PaymentInput, extraHttpRequestParams?: any): Observable<models.Payment> {
        return this.createPaymentWithHttpInfo(coinType, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     * @param body 
     */
    public deleteAddress(coinType: string, body?: models.UserAddress, extraHttpRequestParams?: any): Observable<models.Success> {
        return this.deleteAddressWithHttpInfo(coinType, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     */
    public getAddresses(extraHttpRequestParams?: any): Observable<Array<models.UserAddress>> {
        return this.getAddressesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param body 
     */
    public getBalance(body?: models.UserAddress, extraHttpRequestParams?: any): Observable<models.AddressBalance> {
        return this.getBalanceWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the block or transaction in the coin daemon by hash
     * Returns the block or the transaction for the given hash.
     * @param coinType 
     * @param body 
     */
    public getBlockOrTransaction(coinType: string, body?: models.BlockOrTransactionRequest, extraHttpRequestParams?: any): Observable<models.BlockOrTransactionResponse> {
        return this.getBlockOrTransactionWithHttpInfo(coinType, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get supported coins
     * Returns the coins supported by the wallet
     */
    public getCoinTypes(extraHttpRequestParams?: any): Observable<Array<models.WalletCoin>> {
        return this.getCoinTypesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     */
    public getLastBlock(coinType: string, extraHttpRequestParams?: any): Observable<models.BlockWrapper> {
        return this.getLastBlockWithHttpInfo(coinType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     */
    public getResourceInfo(extraHttpRequestParams?: any): Observable<models.RestResourceInfo> {
        return this.getResourceInfoWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get the spendKeys for a userAddress
     * Returns the public view key and the private spend key
     * @param body 
     */
    public getSpendKeys(body?: models.UserAddress, extraHttpRequestParams?: any): Observable<models.WalletKeys> {
        return this.getSpendKeysWithHttpInfo(body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find the transactions for the address
     * Find the transactions for the address.
     * @param coinType 
     * @param body 
     */
    public getTransactionsForAddress(coinType: string, body?: models.UserAddress, extraHttpRequestParams?: any): Observable<models.TransactionsResponse> {
        return this.getTransactionsForAddressWithHttpInfo(coinType, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     */
    public createAddressWithHttpInfo(coinType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/createAddress/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling createAddress.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a payment
     * Create a payment and return the hash of it.
     * @param coinType 
     * @param body 
     */
    public createPaymentWithHttpInfo(coinType: string, body?: models.PaymentInput, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/createPayment/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling createPayment.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     * @param body 
     */
    public deleteAddressWithHttpInfo(coinType: string, body?: models.UserAddress, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/deleteAddress/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling deleteAddress.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     */
    public getAddressesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getAddresses`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param body 
     */
    public getBalanceWithHttpInfo(body?: models.UserAddress, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getBalance`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the block or transaction in the coin daemon by hash
     * Returns the block or the transaction for the given hash.
     * @param coinType 
     * @param body 
     */
    public getBlockOrTransactionWithHttpInfo(coinType: string, body?: models.BlockOrTransactionRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getBlockOrTransaction/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getBlockOrTransaction.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get supported coins
     * Returns the coins supported by the wallet
     */
    public getCoinTypesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getCoinTypes`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the component fragment by ID
     * Returns the fragments for the given ID. It&#39;s a composite ID, so it is used as criteria
     * @param coinType 
     */
    public getLastBlockWithHttpInfo(coinType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getLastBlock/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getLastBlock.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     */
    public getResourceInfoWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/info`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get the spendKeys for a userAddress
     * Returns the public view key and the private spend key
     * @param body 
     */
    public getSpendKeysWithHttpInfo(body?: models.UserAddress, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getSpendKeys`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find the transactions for the address
     * Find the transactions for the address.
     * @param coinType 
     * @param body 
     */
    public getTransactionsForAddressWithHttpInfo(coinType: string, body?: models.UserAddress, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/wallet/getTransactionsForAddress/${coinType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'coinType' is not null or undefined
        if (coinType === null || coinType === undefined) {
            throw new Error('Required parameter coinType was null or undefined when calling getTransactionsForAddress.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
