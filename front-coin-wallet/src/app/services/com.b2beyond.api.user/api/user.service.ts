/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BuildableResponse } from '../model/buildableResponse';
import { Disable2FARequest } from '../model/disable2FARequest';
import { Enable2FARequest } from '../model/enable2FARequest';
import { LoginProperties } from '../model/loginProperties';
import { PrepareComponent } from '../model/prepareComponent';
import { QRImageUrlResponse } from '../model/qRImageUrlResponse';
import { RestResourceInfo } from '../model/restResourceInfo';
import { TagName } from '../model/tagName';
import { User } from '../model/user';
import { Verify2FA } from '../model/verify2FA';
import { WebMessage } from '../model/webMessage';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserService {

    protected basePath = 'https://api.b2bcoin.xyz/user/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param websiteId 
     * @param activationToken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateUser(websiteId: number, activationToken: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public activateUser(websiteId: number, activationToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public activateUser(websiteId: number, activationToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public activateUser(websiteId: number, activationToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (websiteId === null || websiteId === undefined) {
            throw new Error('Required parameter websiteId was null or undefined when calling activateUser.');
        }
        if (activationToken === null || activationToken === undefined) {
            throw new Error('Required parameter activationToken was null or undefined when calling activateUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<User>(`${this.basePath}/user/activate/${encodeURIComponent(String(websiteId))}/${encodeURIComponent(String(activationToken))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Prepare the login module for preview or creation
     * Prepare the login module for preview or creation
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public build(body?: PrepareComponent, observe?: 'body', reportProgress?: boolean): Observable<BuildableResponse>;
    public build(body?: PrepareComponent, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BuildableResponse>>;
    public build(body?: PrepareComponent, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BuildableResponse>>;
    public build(body?: PrepareComponent, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<BuildableResponse>(`${this.basePath}/user/prepare`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Copy the login properties fragments by ID
     * Returns the new copied fragments
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyProperties(body?: any, observe?: 'body', reportProgress?: boolean): Observable<Array<LoginProperties>>;
    public copyProperties(body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LoginProperties>>>;
    public copyProperties(body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LoginProperties>>>;
    public copyProperties(body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<LoginProperties>>(`${this.basePath}/user/copy`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the user by ID
     * Deletes the user, returns a boolean
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFragment(body?: User, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteFragment(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteFragment(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteFragment(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/user/delete`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the component property by ID
     * Deletes the component property, returns a boolean
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProperties(body?: any, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteProperties(body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteProperties(body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteProperties(body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<boolean>(`${this.basePath}/user/deleteProperty`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enable 2fa
     * Enable 2FA on user
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disable2FA(body?: Disable2FARequest, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public disable2FA(body?: Disable2FARequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public disable2FA(body?: Disable2FARequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public disable2FA(body?: Disable2FARequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/disable2FA`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enable 2fa
     * Enable 2FA on user
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enable2FA(body?: Enable2FARequest, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public enable2FA(body?: Enable2FARequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public enable2FA(body?: Enable2FARequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public enable2FA(body?: Enable2FARequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/enable2FA`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Activate the user
     * Activate the user and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public forgotPassword(body?: User, observe?: 'body', reportProgress?: boolean): Observable<WebMessage>;
    public forgotPassword(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WebMessage>>;
    public forgotPassword(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WebMessage>>;
    public forgotPassword(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<WebMessage>(`${this.basePath}/user/forgotPassword`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the form of the properties
     * Returns the form of the properties
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFormSkeleton(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getFormSkeleton(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getFormSkeleton(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getFormSkeleton(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/user/formSkeleton`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the html exposed tags
     * Get the tag names that can be used in the pages
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHtmlTags(observe?: 'body', reportProgress?: boolean): Observable<Array<TagName>>;
    public getHtmlTags(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TagName>>>;
    public getHtmlTags(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TagName>>>;
    public getHtmlTags(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TagName>>(`${this.basePath}/user/exposedTags`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the login properties
     * Get the login properties for a site and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProperties(body?: any, observe?: 'body', reportProgress?: boolean): Observable<LoginProperties>;
    public getProperties(body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginProperties>>;
    public getProperties(body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginProperties>>;
    public getProperties(body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<LoginProperties>(`${this.basePath}/user/getProperties`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the skeleton of the properties
     * Returns the skeleton of the properties that can be saved by the service to use later
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertiesSkeleton(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPropertiesSkeleton(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPropertiesSkeleton(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPropertiesSkeleton(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/user/propertiesSkeleton`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Is the Service running ?
     * Returns if the service runs or not. Without other exceptions in mind, just running
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResourceInfo(observe?: 'body', reportProgress?: boolean): Observable<RestResourceInfo>;
    public getResourceInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestResourceInfo>>;
    public getResourceInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestResourceInfo>>;
    public getResourceInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<RestResourceInfo>(`${this.basePath}/user/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the user by ID
     * Returns the user for the given ID.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(body?: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public login(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public login(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public login(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/user/login`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Refresh the JWT Token
     * Based on the refresh token if it passed the JWTFilter
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refresh(body?: User, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public refresh(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public refresh(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public refresh(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/user/refresh`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register the user
     * Register the user and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public register(body?: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public register(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public register(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public register(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Request a QR code to enable 2fa
     * Request a QR code to enable 2fa, returns a QRImageUrlResponse
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestEnable2FA(body?: User, observe?: 'body', reportProgress?: boolean): Observable<QRImageUrlResponse>;
    public requestEnable2FA(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QRImageUrlResponse>>;
    public requestEnable2FA(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QRImageUrlResponse>>;
    public requestEnable2FA(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<QRImageUrlResponse>(`${this.basePath}/user/requestEnable2FA`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset password
     * Reset password and returns the user if all went ok, else 500 is thrown
     * @param websiteId 
     * @param passwordResetToken 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPassword(websiteId: number, passwordResetToken: string, body?: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public resetPassword(websiteId: number, passwordResetToken: string, body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public resetPassword(websiteId: number, passwordResetToken: string, body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public resetPassword(websiteId: number, passwordResetToken: string, body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (websiteId === null || websiteId === undefined) {
            throw new Error('Required parameter websiteId was null or undefined when calling resetPassword.');
        }
        if (passwordResetToken === null || passwordResetToken === undefined) {
            throw new Error('Required parameter passwordResetToken was null or undefined when calling resetPassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/resetPassword/${encodeURIComponent(String(websiteId))}/${encodeURIComponent(String(passwordResetToken))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveProperties(body?: any, observe?: 'body', reportProgress?: boolean): Observable<LoginProperties>;
    public saveProperties(body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginProperties>>;
    public saveProperties(body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginProperties>>;
    public saveProperties(body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<LoginProperties>(`${this.basePath}/user/saveProperties`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the user
     * Update the user and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFragment(body?: User, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public updateFragment(body?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public updateFragment(body?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public updateFragment(body?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/update`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save the login properties
     * Save the login properties and returns it if all went ok, else 500 is thrown
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProperties(body?: LoginProperties, observe?: 'body', reportProgress?: boolean): Observable<LoginProperties>;
    public updateProperties(body?: LoginProperties, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginProperties>>;
    public updateProperties(body?: LoginProperties, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginProperties>>;
    public updateProperties(body?: LoginProperties, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<LoginProperties>(`${this.basePath}/user/updateProperties`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Validate the login module for preview or creation
     * Validate the login module for preview or creation
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validate(body?: PrepareComponent, observe?: 'body', reportProgress?: boolean): Observable<PrepareComponent>;
    public validate(body?: PrepareComponent, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PrepareComponent>>;
    public validate(body?: PrepareComponent, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PrepareComponent>>;
    public validate(body?: PrepareComponent, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<PrepareComponent>(`${this.basePath}/user/validate`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Verifies the 2fa number
     * Verifies the 2fa number, returns a User
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verify2FA(body?: Verify2FA, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public verify2FA(body?: Verify2FA, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public verify2FA(body?: Verify2FA, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public verify2FA(body?: Verify2FA, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/user/verify2FA`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
